#!/usr/bin/ruby -w

require 'digest/md5'

class KeyGenerator
  LOOKAHEAD = 1000

  def initialize(salt, stretched_hash = false)
    @salt = salt
    @hashes = []
    @lookahead = []
    @stretched_hash = stretched_hash

    # Create initial 1000 items in lookahead
    update_lookahead
  end

  def update_lookahead
    while @lookahead.length < LOOKAHEAD
      n = @hashes.length + @lookahead.length
      @lookahead << (@stretched_hash ? KeyGenerator.stretched_hash("#{@salt}#{n}") : KeyGenerator.hash("#{@salt}#{n}"))
      # puts "##{n}: '#{@salt}#{n}' => '#{@lookahead.last}'"
    end
  end

  def self.hash(input)
    Digest::MD5.hexdigest(input)
  end

  def self.stretched_hash(input, stretch = 2016)
    hash = self.hash(input)
    (1..stretch).each do
      hash = self.hash(hash)
    end
    hash
  end

  def self.triple_digit(hash)
    l = nil
    ll = nil

    hash.split('').each do |c|
      return c if (ll == l) && (l == c)
      ll = l
      l = c
    end

    nil
  end

  def is_key?(hash)
    triple_digit = KeyGenerator.triple_digit(hash)
    return return triple_digit != nil && @lookahead.select { |hash| hash.include? (triple_digit * 5) }.length > 0
  end

  def generate_valid_keys(num_valid_keys)
    valid_key_indices = []
    while valid_key_indices.length < num_valid_keys do
      # Take the next from the lookahead array
      @hashes << @lookahead.shift
      # Make sure lookahead always contains 1000 entries
      update_lookahead
      # Check if the new hash taken from lookahead is a valid key
      valid_key_indices << (@hashes.length - 1) if is_key? @hashes.last
    end

    valid_key_indices
  end
end


gen_test_part1 = KeyGenerator.new('abc')
gen_test_part2 = KeyGenerator.new('abc', stretched_hash = true)

gen_part1 = KeyGenerator.new('jlmsuwbz')
gen_part2 = KeyGenerator.new('jlmsuwbz', stretched_hash = true)

# Generate more keys until we have enough, batches of 1000
puts "Test input part 1: 1st key is generated by input #{gen_test_part1.generate_valid_keys(1).last}"
puts "Test input part 2: 1st key is generated by input #{gen_test_part2.generate_valid_keys(1).last}"
puts "Part 1: 64th key is generated by input #{gen_part1.generate_valid_keys(64).last}"
puts "Part 2: 64th key is generated by input #{gen_part2.generate_valid_keys(64).last}"